{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","testGenre","_renderMovies","_this","movies","movie","src_Movie","s","img","i","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","console","log","Date","getDay","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiEA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAqBzBC,MAtDf,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdM,EAAOE,IAAI,SAACL,EAAMM,GAAP,OAAiBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAE5Dd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAQL,EACRM,QAAU,IACVC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCSjBC,6MAtDbC,MAAQ,KAcRC,UAAY,CAAC,WACbC,cAAgB,WASd,OAReC,EAAKH,MAAMI,OAAOd,IAAI,SAAAe,GACnC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAOzB,MAAOwB,EAAME,EACbhC,OAAQ8B,EAAMG,IACdhB,IAAKa,EAAMI,EACXrB,OAAQe,EAAKF,UACbZ,SAAUgB,EAAME,SAMlCG,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAGXf,EAAKgB,SAAS,CACZf,WAJS,wBAAAU,EAAAM,SAAAT,EAAAU,WAQbJ,SAAW,WACT,OAAOK,MAAM,uCACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAiD,OAAxCC,QAAQC,IAAIF,GAAK,IAAIG,MAAOC,WAAmBJ,GAAK,IAAIG,MAAOC,YAC7EC,MAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,uIA5B1BV,KAAKX,8CA+BE,IAGCN,EAAWiB,KAAKrB,MAAhBI,OACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKG,UAAWsB,EAAQ,MAAQ,gBAC7BA,EAASiB,KAAKnB,gBAAkB,kBAxDvB8B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.db62451b.chunk.js","sourcesContent":["import React from 'react';\n//import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\n/*\nclass Movie extends Component {\n\n    static propTypes = {\n        title: PropTypes.string.isRequired,\n        poster: PropTypes.string.isRequired\n    }\n\n    render() {\n        return (\n            <div>\n                <MoviePoster poster={this.props.poster} />\n                <h1>{this.props.title}</h1>\n            </div>\n\n        )\n    }\n}\n\nclass MoviePoster extends Component {\n\n    static propTypes = {\n        poster: PropTypes.string.isRequired\n    }\n\n    render(){\n        return(\n            <img src={this.props.poster} alt=\"emotions\"/>\n        )\n    }\n}\n*/\n\n//단지 return 만 해줄 필요 있는건 stateless functional 로 써도 된다.\nfunction Movie({title, poster, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Columns\">\n                <MoviePoster poster={poster} alt={title} />\n            </div>\n            <div className=\"Movie__Columns\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text = {synopsis}\n                        maxLine = '3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({poster, alt}) {\n    return (\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n    )\n}\n\nfunction MovieGenre({genre}){\n    return (\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired,\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt:    PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update : componentWillReceiveProps() -> \n  //          shouldComponentUpdate() == true -> \n  //          componentWillUpdate() [로딩중 스피너를 붙일수 있다]\n  //          render() -> componentDidUpdate() [로딩중 스피너 숨기기]\n  \n  state = {\n\n  };\n\n  componentWillMount() {\n    // 1\n    // 예를 들어 api에 작업을 요청\n  }\n\n  componentDidMount() {\n    // 3\n    this._getMovies();\n  }\n\n  testGenre = ['anime']\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie title={movie.s} \n                    poster={movie.img} \n                    key={movie.i} \n                    genres={this.testGenre}\n                    synopsis={movie.s}\n      />\n    })\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    // call api 작업이 완료되기 전까지는 실행되지 않음  \n    this.setState({\n      movies // == movies: movies (모던 자바스크립트)\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://ohli.moe/timetable/list/now')\n    .then(potato => potato.json())\n    .then(json => {console.log(json[new Date().getDay()]); return json[new Date().getDay()]})\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    // 2 \n    // 컴포넌트 안에 state가 바뀔 때 마다, render이 발생 할 것이다.\n    const { movies } = this.state;\n    return (\n      <div className={movies? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}